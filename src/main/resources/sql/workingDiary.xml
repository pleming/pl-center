<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="workingDiary">
    <select id="loadWorkingDiary" resultType="org.computerized.pl.model.workingDiary.WorkingDiaryVO">
        SELECT
            WD.id AS workingDiaryId,
            WD.user_code AS userCode,
            users.name,
            working_start_datetime AS workingStartDatetime,
            working_end_datetime AS workingEndDatetime,
            working_contents AS workingContents
        FROM pl_center.working_diary AS WD
        INNER JOIN users
        ON WD.user_code = users.user_code
        WHERE working_start_datetime BETWEEN #{nowYearMonth} AND LAST_DAY(#{nowYearMonth})
    </select>

    <select id="loadWorkingDiaryForAdmin" resultType="org.computerized.pl.model.workingDiary.WorkingDiaryForAdminVO">
        SELECT
            WD.id AS workingDiaryId,
            U.user_id AS userId,
            C.college,
            D.dept,
            U.student_code AS studentCode,
            U.name,
            WD.working_start_datetime AS workingStartDatetime,
            WD.working_end_datetime AS workingEndDatetime,
            WD.working_contents AS workingContents
        FROM pl_center.working_diary AS WD
        INNER JOIN users AS U
        ON U.user_code = WD.user_code
        INNER JOIN college AS C
        ON U.col_id = C.id
        INNER JOIN dept AS D
        ON U.dept_id = D.id
        ORDER BY WD.working_start_datetime DESC
        LIMIT ${startIdx}, ${rowBound}
    </select>

    <select id="getTotalRowCount" resultType="java.lang.Integer">
        SELECT
            count(*)
        FROM notice
    </select>

    <select id="searchWorkingDiary" resultType="org.computerized.pl.model.workingDiary.WorkingDiaryForAdminVO">
        SELECT
            WD.id AS workingDiaryId,
            U.user_id AS userId,
            C.college,
            D.dept,
            U.student_code AS studentCode,
            U.name,
            WD.working_start_datetime AS workingStartDatetime,
            WD.working_end_datetime AS workingEndDatetime,
            WD.working_contents AS workingContents
        FROM pl_center.working_diary AS WD
        INNER JOIN users AS U
        ON U.user_code = WD.user_code
        INNER JOIN college AS C
        ON U.col_id = C.id
        INNER JOIN dept AS D
        ON U.dept_id = D.id
        WHERE WD.id IS NOT NULL
            <if test="startDate != null and endDate != null">
                AND (working_start_datetime BETWEEN #{startDate} AND #{endDate})
            </if>
            AND (U.user_id LIKE #{searchKey}
                OR college LIKE #{searchKey}
                OR dept LIKE #{searchKey}
                OR U.student_code LIKE #{searchKey}
                OR U.name LIKE #{searchKey})
        ORDER BY WD.working_start_datetime DESC
    </select>

    <insert id="addWorkingDiary">
        INSERT INTO
            working_diary(user_code, working_start_datetime, working_end_datetime, working_contents)
        VALUES
            <foreach item="item" index="index" collection="workingDiaryAddList" separator=",">
                (${item.userCode}, #{item.workingStartDatetime}, #{item.workingEndDatetime}, #{item.workingContents})
            </foreach>
    </insert>

    <delete id="delWorkingDiary">
        DELETE FROM working_diary
        WHERE id IN
        <foreach item="item" index="index" collection="workingDiaryIdList" open="(" separator="," close=")">
            ${item}
        </foreach>
    </delete>

    <insert id="attendWorker">
        INSERT INTO
			working_diary(user_code, working_start_datetime, working_end_datetime, working_contents)
        VALUES
        	(#{userCode}, #{workingStartDatetime}, #{workingEndDatetime}, #{workingContents})
    </insert>
</mapper>